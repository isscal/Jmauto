<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">C:\Software\apache-jmeter-4.0\jmeterScrips\wallet_methods-0.0.1-SNAPSHOT-jar-with-dependencies-1.8.jar</stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="btc" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell 取样器" enabled="true">
          <stringProp name="BeanShellSampler.query">import wallet.methods.test.BtcMethodsTest;
    
String ADDRESS_1 = &quot;mnTX4RtFfTXpL6Naeng8Nq4HiSVeGh4Nwf&quot;;
String ADDRESS_2 = &quot;moAkHzoGjB9esbwo1sLYruDSPo2JmW6RA1&quot;;

String ADDRESS_3 = &quot;n1dXWdmz4xAe6ANqtT6UZGS1qvEGoXp4pD&quot;;
String ADDRESS_4 = &quot;mirH2LGrBP1N4keKCbK4LucFbhnTcBAEXK&quot;;
String ADDRESS_5 = &quot;mwdiyqULLAeHBjch5EqNAKAQhvuVriBc8Q&quot;;
	
String MNEMONIC_1 = &quot;rib eyebrow screen number chair write shrimp retreat broom cruel matter heavy&quot;;
String MNEMONIC_2 = &quot;begin badge know produce smooth inquiry rapid million around program analyst limb&quot;;		
long AMOUNT = 5000;
long GAS = 4000;

//BtcMethodsTest.sendTxWithMnemonic(ADDRESS_1, ADDRESS_2, MNEMONIC_1, AMOUNT, GAS, &quot;test memo&quot;);
String txid = BtcMethodsTest.sendTxWithMnemonic(ADDRESS_1, MNEMONIC_1, AMOUNT, GAS, &quot;test memo&quot;, ADDRESS_3, ADDRESS_4, ADDRESS_5);
//String txid = BtcMethodsTest.sendTxWithMnemonic(ADDRESS_2, MNEMONIC_2, AMOUNT, GAS, &quot;test memo&quot;, ADDRESS_1, ADDRESS_4, ADDRESS_5);
log.info(&quot;btc txid: &quot;+txid);
vars.put(&quot;Jtxid&quot;,txid);





//    import api.Api;
//
//String addressFrom = &quot;${aF}&quot;;
//String addressTo = &quot;${aT}&quot;;
//String amount = &quot;&quot;;
//String gasPriceStr = &quot;${gP}&quot;;
//String gasLimitStr = &quot;${gL}&quot;;
//String mnemonic = &quot;${mnF}&quot;;
//String nonceStr = &quot;${get_nonce}&quot;;
//
//log.info(&quot;*******************************开始执行方法*******************************************&quot;);
//log.info(&quot;*******************************开始执行方法*******************************************&quot;);
//String signTemp = new Api().signTx(nonceStr, addressFrom, addressTo, amount, gasPriceStr, gasLimitStr, mnemonic);
////System.out.print(signTemp);
//vars.put(&quot;sigTx&quot;,signTemp);
//return &quot;success&quot;;
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">${Jtxid}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">encrypt</stringProp>
            <stringProp name="Header.value">0</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie 管理器" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ltc" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell 取样器" enabled="true">
          <stringProp name="BeanShellSampler.query">import wallet.methods.test.LtcMethodsTest;
    
String ADDRESS_1 = &quot;moAkHzoGjB9esbwo1sLYruDSPo2JmW6RA1&quot;;
String ADDRESS_2 = &quot;n4UeKWkdy88p5v7Ey9mhfrjxUQBzGdAJMB&quot;;

String ADDRESS_3 = &quot;mt7UMvtGRqC7jW9Lb72Di8nQpBymahSgHi&quot;;                                                                                                                                                                                                                                                                                                        
String ADDRESS_4 = &quot;miBovNkxir5GCvVf4TjipECDheDCLYM8QB&quot;;
String ADDRESS_5 = &quot;myo5bZwNXJTK8X47djYMEMngQZVtbjBCvi&quot;;


	
String MNEMONIC_1 = &quot;begin badge know produce smooth inquiry rapid million around program analyst limb&quot;;
		
long AMOUNT = 6000;
long GAS = 50000;

//BtcMethodsTest.sendTxWithMnemonic(ADDRESS_1, ADDRESS_2, MNEMONIC_1, AMOUNT, GAS, &quot;test memo&quot;);
//String txid = LtcMethodsTest.sendTxWithMnemonic(ADDRESS_1, MNEMONIC_1, AMOUNT, GAS, &quot;test memo&quot;, ADDRESS_6);

String txid = LtcMethodsTest.sendTxWithMnemonic(ADDRESS_1, MNEMONIC_1, AMOUNT, GAS, &quot;test memo&quot;, ADDRESS_3, ADDRESS_5, ADDRESS_4);
//String txid = LtcMethodsTest.sendTxWithMnemonic(ADDRESS_1, ADDRESS_2, MNEMONIC_1, AMOUNT, GAS, &quot;test memo&quot;);
log.info(&quot;ltc txid: &quot;+txid);
vars.put(&quot;Jtxid&quot;,txid);






//    import api.Api;
//
//String addressFrom = &quot;${aF}&quot;;
//String addressTo = &quot;${aT}&quot;;
//String amount = &quot;&quot;;
//String gasPriceStr = &quot;${gP}&quot;;
//String gasLimitStr = &quot;${gL}&quot;;
//String mnemonic = &quot;${mnF}&quot;;
//String nonceStr = &quot;${get_nonce}&quot;;
//
//log.info(&quot;*******************************开始执行方法*******************************************&quot;);
//log.info(&quot;*******************************开始执行方法*******************************************&quot;);
//log.info(&quot;*******************************开始执行方法*******************************************&quot;);
//String signTemp = new Api().signTx(nonceStr, addressFrom, addressTo, amount, gasPriceStr, gasLimitStr, mnemonic);
////System.out.print(signTemp);
//vars.put(&quot;sigTx&quot;,signTemp);
//return &quot;success&quot;;
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="true">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">${Jtxid}</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
          <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
